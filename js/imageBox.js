// Generated by CoffeeScript 1.7.1
(function() {
  (function($, window) {
    var ImageBox;
    $.fn.extend({
      'imageBox': function(option, args) {
        var funk;
        funk = function($e) {
          var data;
          data = $e.data('imageBox');
          if (!data) {
            $e.data('imageBox', (data = new ImageBox($e, option)));
          }
          if (typeof option === 'string') {
            args = [].concat(args);
            return data[option].apply(data, args);
          }
        };
        if (this.length === 1) {
          return funk($(this));
        } else {
          return this.each(function() {
            return funk($(this));
          });
        }
      }
    });
    return ImageBox = (function() {
      ImageBox.prototype._events = function() {
        var self;
        self = this;
        this.$image.on('mousewheel', function(e) {
          var h, pos, scaling, w, wh;
          pos = Math.round(e.originalEvent.wheelDelta);
          if (pos > 0) {
            scaling = pos / 100;
          } else {
            scaling = pos / -200;
          }
          wh = $(this).css('background-size').split(' ');
          w = Number(wh[0].replace('px', '')) * scaling;
          h = Number(wh[1].replace('px', '')) * scaling;
          return $(this).css('background-size', "" + w + "px " + h + "px");
        });
        this.$image.on('dblclick', function(e) {
          self.$image.css('background-position', '0px 0px');
          return self.resize(self.stockHeight, self.stockWidth);
        });
        return this.$image.on('mousedown', function(e) {
          var curX, curY, destroy, handler, xy;
          curX = e.pageX;
          curY = e.pageY;
          xy = self.$image.css('background-position').split(' ');
          curX = curX - Number(xy[0].replace('px', ''));
          curY = curY - Number(xy[1].replace('px', ''));
          handler = function(e) {
            var x, y;
            if (e.type !== 'mouseup') {
              x = Math.ceil(e.pageX - curX);
              y = Math.ceil(e.pageY - curY);
              return $(this).css('background-position', "" + x + "px " + y + "px");
            } else {
              return destroy();
            }
          };
          destroy = function() {
            return self.$image.off('mouseup mousemove', handler);
          };
          self.$image.on('mouseup mousemove', handler);
          return self.$image.on('mouseleave', destroy);
        });
      };

      function ImageBox(element, options) {
        this.element = element;
        this.stretchToCanvas = options.stretchToCanvas || true;
        this.stockHeight = this.element.height();
        this.stockWidth = this.element.width();
        this.image = document.createElement('div');
        this.$image = $(this.image);
        this.element.append(this.image);
        this.clearImage();
        this._events();
      }

      ImageBox.prototype.setImage = function(img) {
        var self, _image;
        self = this;
        this.$image.css('cursor', 'move');
        _image = new Image();
        _image.addEventListener('load', function() {
          self.$image.css('background-image', "url('" + img + "')");
          self.resize(this.height, this.width);
          self.stockHeight = this.height;
          self.stockWidth = this.width;
          return _image = null;
        });
        return _image.src = img;
      };

      ImageBox.prototype.resize = function(height, width) {
        var eHeight, eWidth, h, w;
        eWidth = this.element.width();
        eHeight = this.element.height();
        if (width <= eWidth && this.stretchToCanvas) {
          w = eWidth;
        } else {
          w = width;
        }
        if (height <= eHeight && this.stretchToCanvas) {
          h = eHeight;
        } else {
          h = height;
        }
        return this.$image.css('background-size', "" + w + "px  " + h + "px");
      };

      ImageBox.prototype.getXY = function() {
        var coords, elemH, elemW, h, imageX, imageY, w, wh, xy;
        xy = this.$image.css('background-position').split(' ');
        imageX = Number(xy[0].replace('px', ''));
        imageY = Number(xy[1].replace('px', ''));
        wh = this.$image.css('background-size').split(' ');
        w = Number(wh[0].replace('px', ''));
        h = Number(wh[1].replace('px', ''));
        elemH = this.element.height();
        elemW = this.element.width();
        coords = {
          "W": w,
          "H": h,
          "X1": -1 * imageX,
          "X2": elemW + imageX,
          "Y1": -1 * imageX,
          "Y2": elemH + imageY
        };
        return coords;
      };

      ImageBox.prototype.clearImage = function() {
        this.$image.css('background-position', "0px 0px");
        this.$image.css('background-image', 'none');
        this.$image.css('-webkit-user-select', 'none');
        this.$image.css('-webkit-user-drag', 'none');
        this.$image.css('cursor', 'auto');
        this.$image.css('background-size', "0px 0px");
        this.$image.css('height', this.element.height());
        this.$image.css('width', this.element.width());
        this.$image.css('background-repeat', 'no-repeat no-repeat');
        return this.$image.css('border', 'none');
      };

      return ImageBox;

    })();
  })(window.jQuery, window);

}).call(this);
